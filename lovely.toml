[manifest]
version = "1.0.0"
dump_lua = true
priority = 0

# UI Suit hiding, part 1/4
[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = "table.insert(n.nodes, tally_sprite("
position = 'before'
match_indent = true
payload = '''

if suit_tallies[suit_map[i]] ~= 0 then

'''

# UI Suit hiding, part 2/4
[[patches]]
[patches.regex]
target = 'main.lua'
pattern = "(?<indent>[\t ]*)suit_map\\[\\s*i\\s*\\]\\s*\\)\\s*\\)"
position = 'after'
line_prepend = '$indent'
payload = '''end'''


# UI Suit hiding, part 3/4
[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = "if not SMODS.Suits[suit].disabled then"
position = 'at'
match_indent = true
payload = '''if (not SMODS.Suits[suit].disabled) and (suit_counts[suit] ~= 0) then'''

# UI Suit hiding, part 4/4
[[patches]]
[patches.pattern]
target = 'main.lua'
pattern = "if not SMODS.Suits[v].disabled then"
position = 'at'
match_indent = true
payload = '''if (not SMODS.Suits[v].disabled) and (suit_counts[v] ~= 0) then'''

# Exotics toggle
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'G.GAME.hands[text].played = G.GAME.hands[text].played + 1'
position = 'after'
match_indent = true
payload = '''

if text == 'h_bunc_Spectrum'
or text == 'h_bunc_Straight Spectrum'
or text == 'h_bunc_Spectrum House'
or text == 'h_bunc_Spectrum Five' then
    enable_exotics()
end

'''

# Exotic color, part 1/2
[[patches]]
[patches.pattern]
target = 'globals.lua'
pattern = "RENTAL = HEX('b18f43'),"
position = 'after'
match_indent = true
payload = '''BUNCO_EXOTIC = HEX('ef9ae7'),'''

# Exotic color, part 2/2
[[patches]]
[patches.pattern]
target = 'functions/misc_functions.lua'
pattern = "legendary = G.C.RARITY[4],"
position = 'after'
match_indent = true
payload = '''bunco_exotic = G.C.BUNCO_EXOTIC,'''

# Colorful Finishers, part 1/4
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "function ease_background_colour_blind(state, blind_override)"
position = 'before'
match_indent = true
payload = '''

local function invert_color(color, invert_red, invert_green, invert_blue)
    local inverted_color = {
    1 - (color[1] or 0),
    1 - (color[2] or 0),
    1 - (color[3] or 0),
    color[4] or 1
    }

    if invert_red then
        inverted_color[1] = color[1] or 0
    end
    if invert_green then
        inverted_color[2] = color[2] or 0
    end
    if invert_blue then
        inverted_color[3] = color[3] or 0
    end

    return inverted_color
end

local function increase_saturation(color, value)
    -- Extract RGB components
    local r = color[1] or 0
    local g = color[2] or 0
    local b = color[3] or 0

    -- Convert RGB to HSL
    local max_val = math.max(r, g, b)
    local min_val = math.min(r, g, b)
    local delta = max_val - min_val

    local h, s, l = 0, 0, (max_val + min_val) / 2

    if delta ~= 0 then
        if l < 0.5 then
            s = delta / (max_val + min_val)
        else
            s = delta / (2 - max_val - min_val)
        end

        if r == max_val then
            h = (g - b) / delta
        elseif g == max_val then
            h = 2 + (b - r) / delta
        else
            h = 4 + (r - g) / delta
        end

        h = h * 60
        if h < 0 then
            h = h + 360
        end
    end

    -- Increase saturation
    s = math.min(s + value, 1)

    -- Convert back to RGB
    local c = (1 - math.abs(2 * l - 1)) * s
    local x = c * (1 - math.abs((h / 60) % 2 - 1))
    local m = l - c / 2

    local r_new, g_new, b_new = 0, 0, 0

    if h < 60 then
        r_new, g_new, b_new = c, x, 0
    elseif h < 120 then
        r_new, g_new, b_new = x, c, 0
    elseif h < 180 then
        r_new, g_new, b_new = 0, c, x
    elseif h < 240 then
        r_new, g_new, b_new = 0, x, c
    elseif h < 300 then
        r_new, g_new, b_new = x, 0, c
    else
        r_new, g_new, b_new = c, 0, x
    end

    -- Adjust RGB values
    r_new, g_new, b_new = (r_new + m), (g_new + m), (b_new + m)

    return {r_new, g_new, b_new, color[4] or 1}
end

'''

# Colorful Finishers, part 2/4
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "if v.name == blindname then"
position = 'after'
match_indent = true
payload = '''
boss_col = v.boss_colour
'''
# Colorful Finishers, part 3/4
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "ease_background_colour{new_colour = G.C.BLUE, special_colour = G.C.RED, tertiary_colour = darken(G.C.BLACK, 0.4), contrast = 3}"
position = 'at'
match_indent = true
payload = '''

if bunco_colorful_finishers then
    ease_background_colour{new_colour = increase_saturation(mix_colours(boss_col, invert_color(boss_col), 0.3), 1),
    special_colour = boss_col,
    tertiary_colour = darken(increase_saturation(mix_colours(boss_col, invert_color(boss_col, true, false, false), 0.3), 0.6), 0.4), contrast = 1.7}
else
    ease_background_colour{new_colour = G.C.BLUE, special_colour = G.C.RED, tertiary_colour = darken(G.C.BLACK, 0.4), contrast = 3}
end

'''

# Colorful Finishers, part 4/4
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "elseif G.GAME.won then"
position = 'at'
match_indent = true
payload = '''elseif G.GAME.won and not bunco_colorful_finishers then'''

# # Shiny Blinds
# [[patches]]
# [patches.pattern]
# target = 'blind.lua'
# pattern = "self.children.animatedSprite:draw_shader('dissolve', 0.1)"
# position = 'at'
# match_indent = true
# payload = '''

# self.ARGS.send_to_shader = self.ARGS.send_to_shader or {}
# self.ARGS.send_to_shader[1] = self.children.animatedSprite.VT.r*10 + G.TIMERS.REAL/(28) + (self.children.animatedSprite.juice and self.children.animatedSprite.juice.r*10 or 0) + self.tilt_var.amt
# self.ARGS.send_to_shader[2] = G.TIMERS.REAL
# self.children.animatedSprite:draw_shader('polychrome', 0.1, self.ARGS.send_to_shader)

# '''
# # Shiny Blinds
# [[patches]]
# [patches.pattern]
# target = 'blind.lua'
# pattern = "self.children.animatedSprite:draw_shader('dissolve')"
# position = 'at'
# match_indent = true
# payload = '''

# self.children.animatedSprite:draw_shader('polychrome', nil, self.ARGS.send_to_shader)

# '''

# # Shiny Blinds
# [[patches]]
# [patches.pattern]
# target = 'functions\UI_definitions.lua'
# pattern = "{shader = 'dissolve', shadow_height = 0.05}"
# position = 'at'
# match_indent = true
# payload = '''
# {shader = 'polychrome', shadow_height = 0.05}
# '''

# function generate_card_ui() (Temporary extra chips)
[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = "if main_end then"
position = "before"
match_indent = true
payload = """
if (_c.set == 'Default' or _c.set == 'Enhanced') and card and card.ability and card.ability.extra and type(card.ability.extra) == 'table' and card.ability.extra.temporary_extra_chips and not card.debuff then
    localize{type = 'other', key = 'temporary_extra_chips', nodes = desc_nodes, vars = {card.ability.extra.temporary_extra_chips}}
end"""

# function CardArea:emplace() (X-Ray)
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = 'if #self.cards > self.config.card_limit then'
position = 'before'
match_indent = true
payload = '''

if G.jokers ~= nil and self == G.hand then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Xray' then
            v:calculate_joker({ emplaced_card = card })
        end
    end
end

'''

# Joker Knight variables
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:drag()'
position = 'before'
match_indent = true
payload = '''

local break_table = {before = nil, after = nil}

'''

# function Node:drag() (Joker Knight 1/2)
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:drag()'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Knight' and not v.debuff then
            if break_table.before == nil then

                break_table.before = {}

                for _, v in ipairs(G.jokers.cards) do
                    table.insert(break_table.before, v.ability.name)
                end

                break_table.after = break_table.before

            end
        end
    end
end

'''

# function Node:stop_drag() (Joker Knight 2/2)
[[patches]]
[patches.pattern]
target = 'engine/node.lua'
pattern = 'function Node:stop_drag()'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Knight' and not v.debuff then
            function do_tables_match(a, b)
                return table.concat(a) == table.concat(b)
            end

            if break_table.before ~= nil then

            break_table.before = {}

            for _, v in ipairs(G.jokers.cards) do
                table.insert(break_table.before, v.ability.name)
            end

            if not do_tables_match(break_table.before, break_table.after) then
                v:calculate_joker({ break_positions = true })
            end

                break_table.before = nil
                break_table.after = nil
            end
        end
    end
end

'''

# function create_card() (JMJB)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'card:set_edition(edition)'
position = 'before'
match_indent = true
payload = '''

if card.ability.name == 'JMJB' then
    if card:get_edition() == nil then
        edition = poll_edition('aura', nil, true, true)
    end
end

'''

# function ease_dollars() (Fiendish)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'function ease_dollars(mod, instant)'
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Fiendish' and not v.debuff then
            if mod > 0 then
                if pseudorandom('fiendish'..G.SEED) < G.GAME.probabilities.normal / v.ability.extra.odds then
                    mod = 1
                    card_eval_status_text(
                    v,
                    'extra',
                    nil, nil, nil,
                    {message = '$'..(mod or '1'), colour = G.C.RED, instant = true})
                else
                    mod = mod * 2
                    card_eval_status_text(
                    v,
                    'extra',
                    nil, nil, nil,
                    {message = '$'..mod, colour = G.C.ORANGE, instant = true})
                end
            end
        end
    end
end

'''

# function create_card() (Doorhanger)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'local _pool, _pool_key = get_current_pool(_type, _rarity, legendary, key_append)'
position = 'before'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Doorhanger' and not v.debuff then
            if _rarity == nil or _rarity < 0.9 then

                _rarity = 0.9

                if pseudorandom('doorhanger'..G.SEED) > 0.98 then
                    _rarity = 1
                end
            end
        end
    end
end

'''

# function evaluate_play (Nil Bill)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "card_eval_status_text(scoring_hand[i], 'debuff')"
position = 'after'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if (v.ability.name == 'Nil Bill' or v.ability.name == 'Neon') and not v.debuff then
            v:calculate_joker({debuffed_card = scoring_hand[i]})
        end
    end
end

'''

# function CardArea:parse_highlighted (Registration Plate 1/3)
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = "update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})"
position = 'at'
match_indent = true
payload = '''
if text == 'h_bunc_Deal' then
    update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level='0', mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})
else
    update_hand_text({immediate = true, nopulse = nil, delay = 0}, {handname=disp_text, level=G.GAME.hands[text].level, mult = G.GAME.hands[text].mult, chips = G.GAME.hands[text].chips})
end
'''

# function Game:set_globals (Registration Plate 2/3)
[[patches]]
[patches.pattern]
target = 'globals.lua'
pattern = "G.C.HAND_LEVELS[0] = G.C.RED"
position = 'at'
match_indent = true
payload = '''
G.C.HAND_LEVELS[0] = G.C.JOKER_GREY
'''

# function level_up_hand (Registration Plate 3/3)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = "function level_up_hand(card, hand, instant, amount)"
position = 'after'
match_indent = true
payload = '''
if hand == 'h_bunc_Deal' then return end
'''

# function Card:is_suit (Myopia & Astigmatism)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if next(find_joker('Smeared Joker')) and (self.base.suit == 'Hearts' or self.base.suit == 'Diamonds') == (suit == 'Hearts' or suit == 'Diamonds') then"
position = 'before'
match_indent = true
payload = '''

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Myopia' and not v.debuff then
            if self.base.suit == 'Spades' and (self.base.suit == 'Spades') == (suit == 'Spades' or suit == 'Halberds') then
                return true
            end
            if self.base.suit == 'Clubs' and (self.base.suit == 'Clubs') == (suit == 'Clubs' or suit == 'Halberds') then
                return true
            end
        end
    end
end

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Astigmatism' and not v.debuff then
            if self.base.suit == 'Hearts' and (self.base.suit == 'Hearts') == (suit == 'Hearts' or suit == 'Fleurons') then
                return true
            end
            if self.base.suit == 'Diamonds' and (self.base.suit == 'Diamonds') == (suit == 'Diamonds' or suit == 'Fleurons') then
                return true
            end
        end
    end
end

if G.jokers ~= nil then
    for _, v in ipairs(G.jokers.cards) do
        if v.ability.name == 'Smeared Joker' and not v.debuff then
            if self.base.suit == 'Fleurons' and (suit ~= 'Fleurons') then
                return false
            end
            if self.base.suit == 'Halberds' and (suit ~= 'Halberds') then
                return false
            end
            if (self.base.suit ~= 'Fleurons' and self.base.suit ~= 'Halberds') and (suit == 'Fleurons' or suit == 'Halberds') then
                return false
            end
        end
    end
end

'''

# G.FUNCS.discard_cards_from_highlighted() (The Paling 1/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'G.GAME.current_round.discards_used = G.GAME.current_round.discards_used + 1'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_paling' and not G.GAME.blind.disabled and not hook then
    if G.GAME.current_round.hands_left > 1 then
        ease_hands_played(-1) --
    elseif G.GAME.current_round.hands_left == 1 or G.GAME.current_round.hands_left == 0 then
        ease_hands_played(-1) --

        G.E_MANAGER:add_event(Event({ trigger = 'after', delay = 1.8, func = function()
            G.STATE = G.STATES.GAME_OVER
            if not G.GAME.won and not G.GAME.seeded and not G.GAME.challenge then 
                G.PROFILES[G.SETTINGS.profile].high_scores.current_streak.amt = 0
            end
            G:save_settings()
            G.FILE_HANDLER.force = true
            G.STATE_COMPLETE = false
        return true end }))
    end
    G.GAME.blind:wiggle()
end

'''

# G.FUNCS.play_cards_from_highlighted() (The Paling 2/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "inc_career_stat('c_hands_played', 1)"
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_paling' and not G.GAME.blind.disabled then
    if G.GAME.current_round.discards_left >= 1 then
        ease_discard(-1, true)
        G.GAME.blind:wiggle()
        G.GAME.blind.triggered = true
    end
end

'''

# G.FUNCS.play_cards_from_highlighted() (The Umbrella)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "inc_career_stat('c_hands_played', 1)"
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_umbrella' and not G.GAME.blind.disabled then
    G.E_MANAGER:add_event(Event({ func = function()

        for k, v in ipairs(G.hand.cards) do
            if v.facing == 'front' then
                v:flip()
            end
        end

        G.GAME.blind:wiggle()
        G.GAME.blind.triggered = true

    return true end }))
end

'''

# The Tine 1/3
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "highlight_card(scoring_hand[i],(i-0.999)/5,'up')"
position = 'after'
match_indent = true
payload = '''

local played_rank = scoring_hand[i].base.value

if G.GAME.played_ranks == nil then G.GAME.played_ranks = {} end

if G.GAME.played_ranks[played_rank] then
    G.GAME.played_ranks[played_rank] = G.GAME.played_ranks[played_rank] + 1
else
    G.GAME.played_ranks[played_rank] = 1
end

'''

# function end_round() (The Tine 2/3)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.current_round.most_played_poker_hand = _handname"
position = 'before'
match_indent = true
payload = '''

if G.GAME.played_ranks ~= nil then
    local max_rank = nil
    local max_count = -1

    for rank, count in pairs(G.GAME.played_ranks) do
        if count > max_count then
            max_count = count
            max_rank = rank
        end
    end

    G.GAME.current_round.most_played_rank = max_rank
end


'''

# The Tine 3/3
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "most_played_poker_hand = 'High Card',"
position = 'after'
match_indent = true
payload = '''
most_played_rank = '2','''

# G.FUNCS.discard_cards_from_highlighted() (The Swing 1/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'G.GAME.current_round.discards_used = G.GAME.current_round.discards_used + 1'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_swing' and not G.GAME.blind.disabled then
    G.E_MANAGER:add_event(Event({ func = function()
        for k, v in ipairs(G.hand.cards) do
            v:flip()
        end

        G.GAME.blind:wiggle()
        G.GAME.blind.triggered = true

        if G.GAME.Swing == true then
            G.GAME.Swing = false
        else
            G.GAME.Swing = true
        end
    return true end }))
end

'''

# G.FUNCS.play_cards_from_highlighted() (The Swing 2/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "inc_career_stat('c_hands_played', 1)"
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_swing' and not G.GAME.blind.disabled then
    G.E_MANAGER:add_event(Event({ func = function()
        for k, v in ipairs(G.hand.cards) do
            if not (v.area == G.hand and v.highlighted and v.facing == 'front') then
                v:flip()
            end
        end

        G.GAME.blind:wiggle()
        G.GAME.blind.triggered = true

        if G.GAME.Swing == true then
            G.GAME.Swing = false
        else
            G.GAME.Swing = true
        end
    return true end }))
end

'''

# G.FUNCS.cash_out (The Miser)
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = 'G.STATE = G.STATES.SHOP'
position = 'at'
match_indent = true
payload = '''

if G.GAME.Miser then
    G.STATE = G.STATES.BLIND_SELECT
    G.GAME.Miser = false
else
    G.STATE = G.STATES.SHOP
end

'''

# function Card:highlight (The Gate 1/2)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'self.highlighted = is_higlighted'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_gate' and not G.GAME.blind.disabled and is_higlighted and self.area == G.hand then
    self.ability.forced_selection = true
end

'''

# function CardArea:remove_from_highlighted (The Gate 2/2)
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = 'function CardArea:remove_from_highlighted(card, force)'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_gate' and not force and card.area == G.hand then
    if G.GAME.blind.disabled then
        card.ability.forced_selection = false
    elseif not G.GAME.blind.disabled and card.ability.forced_selection == true then
        G.GAME.blind:wiggle()
    end
end

'''

# function end_round() (The Mask 1/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.GAME.current_round.most_played_poker_hand = _handname"
position = 'before'
match_indent = true
payload = '''

local lowestValue = math.huge
local leastPlayedHand = ''

for i = #G.handlist, 1, -1 do
    local v = G.handlist[i]
    local playedCount =  G.GAME.hands and G.GAME.hands[v] and G.GAME.hands[v].played or 0
    if playedCount < lowestValue then
        lowestValue = playedCount
        leastPlayedHand = v
    end
end

G.GAME.current_round.least_played_poker_hand = leastPlayedHand

'''

# The Mask 2/2
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = "most_played_poker_hand = 'High Card',"
position = 'after'
match_indent = true
payload = '''
least_played_poker_hand = 'High Card','''

# The Blade
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = "(?<indent>[\t ]*)else\\s*\\n[\\t ]*mult\\s*=\\s*mod_mult\\(\\s*0\\s*\\)\\s*\\n[\\t ]*hand_chips\\s*=\\s*mod_chips\\(\\s*0\\s*\\)\\s*"
position = 'before'
line_prepend = '$indent'
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_blade' and not G.GAME.blind.disabled then

    local overscore = get_blind_amount(G.GAME.round_resets.ante)*G.GAME.blind.mult*G.GAME.starting_params.ante_scaling
    overscore = overscore * 1.5

    if G.GAME.Blade and not G.GAME.Blade.disabled and (overscore < math.floor(hand_chips*mult)) then

        mult = mod_mult(0)
        hand_chips = mod_chips(0)

        G.GAME.chips = G.GAME.Blade.chips

        G.E_MANAGER:add_event(Event({
            trigger = 'after',
            func = (function()
                G.GAME.blind:wiggle()
                return true
            end)
        }))

        local blade_message = global_bunco and global_bunco.loc.exceeded_score or ' '
        play_area_status_text(blade_message)

        G.GAME.Blade.disabled = true

    end
end

'''

# G.FUNCS.discard_cards_from_highlighted (The Claw)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])"
position = 'at'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_claw' and not G.GAME.blind.disabled then
    draw_card(G.hand, G.deck, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
    G.deck:shuffle('claw'..G.GAME.round_resets.ante)
else
    draw_card(G.hand, G.discard, i*100/highlighted_count, 'down', false, G.hand.highlighted[i])
end

'''

# function Card:highlight (The Veil)
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'self.highlighted = is_higlighted'
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_veil' and not G.GAME.blind.disabled and is_higlighted and self.area == G.hand then
    if self.facing == 'front' then
        self:flip()
        G.GAME.blind:wiggle()
    end
end

'''

# G.FUNCS.cash_out (Vermilion Trident 1/2)
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
pattern = 'G.STATE = G.STATES.SHOP'
position = 'at'
match_indent = true
payload = '''

if G.GAME.Trident then
    G.STATE = G.STATES.BLIND_SELECT
else
    G.STATE = G.STATES.SHOP
end

'''

# function get_new_boss() (Vermilion Trident 2/2)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'return boss'
position = 'before'
match_indent = true
payload = '''

if boss == 'bl_bunc_final_trident' then
    G.GAME.Trident = true
else
    G.GAME.Trident = false
end

'''

# G.FUNCS.discard_cards_from_highlighted (Magenta Dagger 1/4)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.FUNCS.discard_cards_from_highlighted = function(e, hook)"
position = 'after'
match_indent = true
payload = '''

if G.GAME.blind and G.GAME.blind.name == 'bl_bunc_final_dagger' and not G.GAME.blind.disabled then
    G.GAME.blind:wiggle()
    G.FUNCS.play_cards_from_highlighted({antiscore = true})
    return
end

'''

# G.FUNCS.play_cards_from_highlighted (Magenta Dagger 2/4)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "ease_hands_played(-1)"
position = 'at'
match_indent = true
payload = '''
local function calculate_discard()
    for i = 1, #G.hand.cards do
        eval_card(G.hand.cards[i], {pre_discard = true, full_hand = G.hand.highlighted, hook = hook})
    end
    for j = 1, #G.jokers.cards do
        G.jokers.cards[j]:calculate_joker({pre_discard = true, full_hand = G.hand.highlighted, hook = hook})
    end
end

if e.antiscore then
    ease_discard(-1)
    calculate_discard()
else
    ease_hands_played(-1)
end

'''

# G.FUNCS.play_cards_from_highlighted (Magenta Dagger 3/4)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "G.FUNCS.evaluate_play()"
position = 'at'
match_indent = true
payload = '''

if e.antiscore then
    G.FUNCS.evaluate_play(e)
else
    G.FUNCS.evaluate_play()
end

'''

# function update_hand_text (Magenta Dagger 4/4)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "ease_to = G.GAME.chips + math.floor(hand_chips*mult),"
position = 'at'
match_indent = true
payload = '''ease_to = G.GAME.chips + math.floor(hand_chips * mult) * (e and e.antiscore and -1 or 1),'''

# function get_new_boss() (Turquoise Shield 1/2)
[[patches]]
[patches.pattern]
target = 'functions/common_events.lua'
pattern = 'return boss'
position = 'before'
match_indent = true
payload = '''

if boss == 'bl_bunc_final_shield' then
    G.GAME.Shield = true
else
    G.GAME.Shield = false
end

'''

# function end_round() (Turquoise Shield 2/2)
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = "function end_round()"
position = 'after'
match_indent = true
payload = '''
if G.GAME.Shield == true then
    if type(G.GAME.chips) ~= 'table' then
        if G.GAME.chips - G.GAME.blind.chips >= 0 then
            G.GAME.overscore = (G.GAME.overscore or 0) + G.GAME.chips - G.GAME.blind.chips
        end
    else
        if G.GAME.chips - G.GAME.blind.chips >= to_big(0) then
            G.GAME.overscore = (G.GAME.overscore or 0) + G.GAME.chips - G.GAME.blind.chips
        end
    end
end
'''

# Insta-yep for tags, delayless-yep
[[patches]]
[patches.pattern]
target = 'tag.lua'
pattern = 'function Tag:yep(message, _colour, func)'
position = 'before'
match_indent = true
payload = '''

function Tag:instayep(message, _colour, func, delay)
    stop_use()
    if delay then
        G.E_MANAGER:add_event(Event({
        delay = delay,
        trigger = 'after',
        func = (function()
            attention_text({
                text = message,
                colour = G.C.WHITE,
                scale = 1, 
                hold = 0.3/G.SETTINGS.GAMESPEED,
                cover = self.HUD_tag,
                cover_colour = _colour or G.C.GREEN,
                align = 'cm',
                })
            play_sound('generic1', 0.9 + math.random()*0.1, 0.8)
            play_sound('holo1', 1.2 + math.random()*0.1, 0.4)
            return true
        end)
        }))
        G.E_MANAGER:add_event(Event({
            func = (function()
                self.HUD_tag.states.visible = false
                return true
            end)
        }))
        G.E_MANAGER:add_event(Event({
            func = func
        }))
        G.E_MANAGER:add_event(Event({
            trigger = 'after',
            delay = 0.7,
            func = (function()
                self:remove()
                return true
            end)
        }))
    else
        attention_text({
            text = message,
            colour = G.C.WHITE,
            scale = 1,
            hold = 0.3/G.SETTINGS.GAMESPEED,
            cover = self.HUD_tag,
            cover_colour = _colour or G.C.GREEN,
            align = 'cm',
            })
        play_sound('generic1', 0.9 + math.random()*0.1, 0.8)
        play_sound('holo1', 1.2 + math.random()*0.1, 0.4)

        G.E_MANAGER:add_event(Event({
            blockable = false,
            blocking = false,
            trigger = 'after',
            func = (function()
                self.HUD_tag.states.visible = false
                return true
            end)
        }))
        G.E_MANAGER:add_event(Event({
            blockable = false,
            blocking = false,
            func = func
        }))
        G.E_MANAGER:add_event(Event({
            blockable = false,
            blocking = false,
            trigger = 'after',
            delay = 0.7,
            func = (function()
                self:remove()
                return true
            end)
        }))
    end
end

'''

# Edition tags 1/3
[[patches]]
[patches.regex]
target = 'functions/state_events.lua'
pattern = "(?<indent>[\t ]*)else\\s*\\n[\\t ]*mult\\s*=\\s*mod_mult\\(\\s*0\\s*\\)\\s*\\n[\\t ]*hand_chips\\s*=\\s*mod_chips\\(\\s*0\\s*\\)\\s*"
position = 'before'
line_prepend = '$indent'
payload = '''

for i = 1, #G.GAME.tags do
    G.GAME.tags[i]:apply_to_run({type = 'hand_played'})
end

'''

# function Card:use_consumeable() Edition tags 2/3
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = 'local used_tarot = copier or self'
position = 'after'
match_indent = true
payload = '''

if used_tarot.edition then
    if used_tarot.edition.foil then
        add_tag(Tag('tag_bunc_chips'))
        play_sound('generic1')
    elseif used_tarot.edition.holo then
        add_tag(Tag('tag_bunc_mult'))
        play_sound('generic1')
    elseif used_tarot.edition.polychrome then
        add_tag(Tag('tag_bunc_xmult'))
        play_sound('generic1')
    elseif used_tarot.edition.bunc_glitter then
        add_tag(Tag('tag_bunc_xchips'))
        play_sound('generic1')
    end
end

'''

# Edition tags 3/3
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'for i=1, #G.jokers.cards + #G.consumeables.cards do'
position = 'at'
match_indent = true
payload = '''for i=1, #G.jokers.cards + (global_bunco and global_bunco.vars and global_bunco.vars.jokerlike_consumable_editions and #G.consumeables.cards or 0) do'''


# function card_open() (Filigree Tag)
[[patches]]
[patches.regex]
target = 'card.lua'
pattern = "(?<indent>[\t ]*)for\\s+i\\s*=\\s*1,\\s*#G\\.jokers\\.cards\\s*do\\s*\\n[\\t ]*G\\.jokers\\.cards\\[i\\]:calculate_joker\\(\\{\\s*open_booster\\s*=\\s*true,\\s*card\\s*=\\s*self\\s*\\}\\)\\s*\\n[\\t ]*end"
position = 'after'
line_prepend = '$indent'
payload = '''

for i = 1, #G.GAME.tags do
    if (self.ability.name == 'Standard Pack' or
    self.ability.name == 'Jumbo Standard Pack' or
    self.ability.name == 'Mega Standard Pack') then
        if G.GAME.tags[i]:apply_to_run({type = 'standard_pack_opened'}) then break end
    end
end

'''

# Glitter edition 1/2
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'if effects[ii].edition then'
position = 'after'
match_indent = true
payload = '''

if scoring_hand and scoring_hand[i] and scoring_hand[i].edition and scoring_hand[i].edition.bunc_glitter then
    local xchips = G.P_CENTERS.e_bunc_glitter.config.Xchips
    hand_chips = mod_chips(hand_chips * xchips)
    update_hand_text({delay = 0}, {chips = hand_chips})
    card_eval_status_text(scoring_hand[i], 'extra', nil, percent, nil,
    {message = 'X'..xchips..' '..global_bunco.loc.chips,
    edition = true,
    x_chips = true})
end

'''

# Two options (bonus first vs bonus last):

# pattern = 'edition_effects.jokers.edition = true'
# position = 'after'

# pattern = 'if edition_effects.jokers.x_mult_mod then'
# position = 'before'

# Glitter edition 2/2
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = 'if edition_effects.jokers.x_mult_mod then'
position = 'before'
match_indent = true
payload = '''

if G.jokers.cards and G.jokers.cards[i] and G.jokers.cards[i].edition and G.jokers.cards[i].edition.bunc_glitter then
    local xchips = G.P_CENTERS.e_bunc_glitter.config.Xchips
    hand_chips = mod_chips(hand_chips * xchips)
    update_hand_text({delay = 0}, {chips = hand_chips})
    card_eval_status_text(G.jokers.cards[i], 'extra', nil, percent, nil,
    {message = 'X'..xchips..' '..global_bunco.loc.chips,
    edition = true,
    x_chips = true})
end

'''


# Fluorescent edition 1/3
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "if self.facing == 'front' then"
position = 'after'
match_indent = true
payload = '''

if (self.area == G.hand or self.area == G.jokers or self.area == G.consumeables) and self.edition and self.edition.bunc_fluorescent then
    return
end

'''

# Fluorescent edition 2/3
[[patches]]
[patches.pattern]
target = 'cardarea.lua'
pattern = "function CardArea:remove_from_highlighted(card, force)"
position = 'after'
match_indent = true
payload = '''

if card.edition and card.edition.bunc_fluorescent then
    card.ability.forced_selection = false
end

'''

# Fluorescent edition 3/3
[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = "function Card:set_debuff(should_debuff)"
position = 'after'
match_indent = true
payload = '''
if self.edition and self.edition.bunc_fluorescent then
    self.debuff = false
    return
end

'''
